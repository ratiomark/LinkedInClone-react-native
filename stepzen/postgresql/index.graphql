type Comment {
  comment: String
  id: ID!
  post: Post @materializer(query: "postUsingComment_postId_fkey")
  postId: ID
  profile: Profile @materializer(query: "profileUsingComment_userId_fkey")
  userId: ID
}

type Experience {
  companyImage: String
  companyName: String
  id: ID!
  profile: Profile @materializer(query: "profileUsingExperience_userId_fkey")
  title: String
  userId: ID
}

type Post {
  comment: [Comment] @materializer(query: "commentUsingComment_postId_fkey")
  content: String
  id: ID!
  image: String
  profile: Profile @materializer(query: "profileUsingPost_userId_fkey")
  reaction: [Reaction] @materializer(query: "reactionUsingReaction_postId_fkey")
  userId: ID
}

type Profile {
  about: String
  authId: String
  backImage: String
  comment: [Comment] @materializer(query: "commentUsingComment_userId_fkey")
  experience: [Experience]
    @materializer(query: "experienceUsingExperience_userId_fkey")
  id: ID!
  image: String
  name: String
  position: String
  post: [Post] @materializer(query: "postUsingPost_userId_fkey")
  reaction: [Reaction] @materializer(query: "reactionUsingReaction_userId_fkey")
}

type Reaction {
  id: ID!
  post: Post @materializer(query: "postUsingReaction_postId_fkey")
  postId: ID
  profile: Profile @materializer(query: "profileUsingReaction_userId_fkey")
  type: String
  userId: ID
}

"""
The following queries are just a set of examples of how to access your schema.
Feel free to modify them or aggregate more.
"""
type Query {
  " Queries for type 'Comment' "
  comment(id: ID!): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      configuration: "postgresql_config"
    )
  commentList: [Comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      configuration: "postgresql_config"
    )
  commentPaginatedList(first: Int, after: Int): [Comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "comment", "id", "postId", "userId" FROM "comment" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  commentUsingComment_postId_fkey(id: ID!): [Comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "comment", "id", "postId", "userId" FROM "comment" WHERE "postId" = $1
      """
      configuration: "postgresql_config"
    )
  commentUsingComment_userId_fkey(id: ID!): [Comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "comment", "id", "postId", "userId" FROM "comment" WHERE "userId" = $1
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'Experience' "
  experience(id: ID!): Experience
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "experience"
      configuration: "postgresql_config"
    )
  experienceList: [Experience]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "experience"
      configuration: "postgresql_config"
    )
  experiencePaginatedList(first: Int, after: Int): [Experience]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "companyImage", "companyName", "id", "title", "userId" FROM "experience" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  experienceUsingExperience_userId_fkey(id: ID!): [Experience]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "companyImage", "companyName", "id", "title", "userId" FROM "experience" WHERE "userId" = $1
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'Post' "
  post(id: ID!): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      configuration: "postgresql_config"
    )
  postList: [Post]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      configuration: "postgresql_config"
    )
  postPaginatedList(first: Int, after: Int): [Post]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "content", "id", "image", "userId" FROM "post" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  postUsingComment_postId_fkey(postId: ID!): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "content", "id", "image", "userId" FROM "post" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  postUsingPost_userId_fkey(id: ID!): [Post]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "content", "id", "image", "userId" FROM "post" WHERE "userId" = $1
      """
      configuration: "postgresql_config"
    )
  postUsingReaction_postId_fkey(postId: ID!): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "content", "id", "image", "userId" FROM "post" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'Profile' "
  profile(id: ID!): Profile
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "profile"
      configuration: "postgresql_config"
    )
  profileList: [Profile]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "profile"
      configuration: "postgresql_config"
    )
  profilePaginatedList(first: Int, after: Int): [Profile]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "about", "authId", "backImage", "id", "image", "name", "position" FROM "profile" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  profileUsingComment_userId_fkey(userId: ID!): Profile
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "about", "authId", "backImage", "id", "image", "name", "position" FROM "profile" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  profileUsingExperience_userId_fkey(userId: ID!): Profile
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "about", "authId", "backImage", "id", "image", "name", "position" FROM "profile" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  profileUsingPost_userId_fkey(userId: ID!): Profile
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "about", "authId", "backImage", "id", "image", "name", "position" FROM "profile" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  profileUsingReaction_userId_fkey(userId: ID!): Profile
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "about", "authId", "backImage", "id", "image", "name", "position" FROM "profile" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  profileUsingprofile_authId_key(authId: String!): Profile
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "about", "authId", "backImage", "id", "image", "name", "position" FROM "profile" WHERE "authId" = $1
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'Reaction' "
  reaction(id: ID!): Reaction
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "reaction"
      configuration: "postgresql_config"
    )
  reactionList: [Reaction]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "reaction"
      configuration: "postgresql_config"
    )
  reactionPaginatedList(first: Int, after: Int): [Reaction]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "id", "postId", "type", "userId" FROM "reaction" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  reactionUsingReaction_postId_fkey(id: ID!): [Reaction]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "id", "postId", "type", "userId" FROM "reaction" WHERE "postId" = $1
      """
      configuration: "postgresql_config"
    )
  reactionUsingReaction_userId_fkey(id: ID!): [Reaction]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "id", "postId", "type", "userId" FROM "reaction" WHERE "userId" = $1
      """
      configuration: "postgresql_config"
    )
}

"""
The following mutations are just a set of examples of how to access your schema.
Feel free to modify them or aggregate more.
"""
type Mutation {
  " Mutations for type 'Comment' "
  deleteComment(id: ID!): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertComment(comment: String, userId: ID, postId: ID): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updateComment(id: ID!, comment: String, postId: ID, userId: ID): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "comment" SET
        "comment" = COALESCE($2, "comment"),
        "postId" = COALESCE($3, "postId"),
        "userId" = COALESCE($4, "userId")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
  " Mutations for type 'Experience' "
  deleteExperience(id: ID!): Experience
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "experience"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertExperience(
    companyName: String
    companyImage: String
    userId: ID
    title: String
  ): Experience
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "experience"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updateExperience(
    id: ID!
    companyImage: String
    companyName: String
    title: String
    userId: ID
  ): Experience
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "experience" SET
        "companyImage" = COALESCE($2, "companyImage"),
        "companyName" = COALESCE($3, "companyName"),
        "title" = COALESCE($4, "title"),
        "userId" = COALESCE($5, "userId")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
  " Mutations for type 'Post' "
  deletePost(id: ID!): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertPost(userId: ID, image: String, content: String): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updatePost(id: ID!, content: String, image: String, userId: ID): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "post" SET
        "content" = COALESCE($2, "content"),
        "image" = COALESCE($3, "image"),
        "userId" = COALESCE($4, "userId")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
  " Mutations for type 'Profile' "
  deleteProfile(id: ID!): Profile
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "profile"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertProfile(
    name: String
    image: String
    backImage: String
    authId: String
    position: String
    about: String
  ): Profile
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "profile"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updateProfile(
    id: ID!
    about: String
    authId: String
    backImage: String
    image: String
    name: String
    position: String
  ): Profile
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "profile" SET
        "about" = COALESCE($2, "about"),
        "authId" = COALESCE($3, "authId"),
        "backImage" = COALESCE($4, "backImage"),
        "image" = COALESCE($5, "image"),
        "name" = COALESCE($6, "name"),
        "position" = COALESCE($7, "position")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
  " Mutations for type 'Reaction' "
  deleteReaction(id: ID!): Reaction
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "reaction"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertReaction(type: String, userId: ID, postId: ID): Reaction
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "reaction"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updateReaction(id: ID!, postId: ID, type: String, userId: ID): Reaction
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "reaction" SET
        "postId" = COALESCE($2, "postId"),
        "type" = COALESCE($3, "type"),
        "userId" = COALESCE($4, "userId")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
}
